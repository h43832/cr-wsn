
package wsn;

import java.awt.Image;
import java.awt.Toolkit;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.TreeMap;
import javax.swing.ImageIcon;

/**
 *
 * @author Administrator
 */
public class WSNDataRelay extends WSNApplication {

  WSN wsn;
  boolean first=true;
  String version="1.0";
  SimpleDateFormat formatter = new SimpleDateFormat ("yyyy/MM/dd HH:mm:ss");
  int lcode=1;
    TreeMap lastDataTime=new TreeMap();
  long startTime=System.currentTimeMillis();
  public WSNDataRelay() {
        initComponents();
        int width=Toolkit.getDefaultToolkit().getScreenSize().width;
        int h=Toolkit.getDefaultToolkit().getScreenSize().height-20;

        int w2=500;
        int h2=300;

        setSize(w2,h2);

        setLocation((width-w2)/2,(h-h2)/2);
        Image iconImage=new ImageIcon(getClass().getClassLoader().getResource("crtc_logo_t.gif")).getImage();
        setIconImage(iconImage);
        if(System.getProperty("user.country").equalsIgnoreCase("TW") && System.getProperty("user.language").equalsIgnoreCase("ZH")) lcode=0;
        else if(System.getProperty("user.country").equalsIgnoreCase("HK") && System.getProperty("user.language").equalsIgnoreCase("ZH")) lcode=0;
        else if(System.getProperty("user.country").equalsIgnoreCase("CN") && System.getProperty("user.language").equalsIgnoreCase("ZH")) lcode=2;
        else lcode=1;
        setTitle((lcode==0? "cr-WSN ?????~?{?? ":"cr-WSN Data Relay ")+version);
        jLabel1.setText((lcode==0? "????????C?C?C?C?C?C":"Waiting for data ....."));
        jLabel3.setText((lcode==0? "????T???: ":"Last data time: "));
        updateLastTime();
    }
  public void init(WSN wsn){
      this.wsn=wsn;
      jLabel2.setText((lcode==0? "?t?£\????: ":"System start at: ")+formatter.format(new Date(startTime))+", os: "+System.getProperty("os.name")+", cr-wsn verion "+wsn.getVersion());
      jLabel4.setText((lcode==0? "?}??ports: ":"Open ports: ")+getPorts());      
  }
  public String getPorts(){
      boolean isFirst=true;
      StringBuffer sb=new StringBuffer();
      if(wsn.props.getProperty("serial_port_open").length()>0){
          sb.append("serial("+wsn.props.getProperty("serial_port_open")+")");
          isFirst=false;
      }
      if(wsn.props.getProperty("socket_port_open").length()>0){
          sb.append((isFirst? "":", ")+"socket("+wsn.props.getProperty("socket_port_open")+")");
      }
      return sb.toString();
  }
  public void setBlink(boolean onoff){}

  public void setStatus(String nodeId,String dataSrc[],int statusCode){}
  public void setData(long time,String nodeId, String dataSrc,String data){
    if(first) jLabel1.setText((lcode==0? "?{?????, ????????C":"Don't close this window while running."));
    lastDataTime.put(dataSrc, formatter.format(new Date(time)));
    updateLastTime();
    first=false;
  }
  void updateLastTime(){
      Iterator it=lastDataTime.keySet().iterator();
      StringBuffer sb=new StringBuffer();
      boolean isFirst=true;
      for(;it.hasNext();){
          String dataSrc=(String)it.next();
          String time=(String)lastDataTime.get(dataSrc);
          sb.append((isFirst? "":", ")+time+"("+dataSrc+")");
          isFirst=false;
      }
      jTextArea1.setText(sb.toString());
  }

  public void onExit(int type){}
  public boolean runInBackground(){
    return false;
  }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();

        setTitle("cr-WSN Data Relay v 1.0");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel1.setFont(jLabel1.getFont().deriveFont((float)24));
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 10, 440, 40);

        jLabel2.setForeground(new java.awt.Color(0, 204, 204));
        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 60, 460, 15);

        jLabel3.setForeground(new java.awt.Color(0, 204, 0));
        jLabel3.setText("jLabel3");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 110, 450, 15);

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 130, 460, 110);

        jLabel4.setForeground(new java.awt.Color(0, 153, 51));
        jLabel4.setText("jLabel4");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 85, 460, 20);

        pack();
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WSNDataRelay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WSNDataRelay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WSNDataRelay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WSNDataRelay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WSNDataRelay().setVisible(true);
            }
        });
    }

    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;

}